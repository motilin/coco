{"version":3,"sources":["Image.js","Webcam.js","Prediction.js","data/coco_labels.txt","ModelProvider.js","App.js","reportWebVitals.js","index.js"],"names":["Image","img","setIsReady","useState","width","setWidth","height","setHeight","ready","useRef","className","type","name","onChange","e","current","file","target","files","substr","reader","FileReader","onload","src","result","alt","readAsDataURL","readImage","ref","onLoad","winWidth","window","innerWidth","winHeight","innerHeight","imgWidth","imgRatio","style","crossOrigin","Webcam","video","webcamStream","a","navigator","mediaDevices","getUserMedia","audio","facingMode","srcObject","URL","createObjectURL","useEffect","setupWebcam","getTracks","stop","onLoadedData","autoPlay","colorScale","d3","domain","Prediction","prediction","input","top","setTop","left","setLeft","rect","getBoundingClientRect","bboxes","map","elem","i","x","bbox","y","stroke","score","opacity","class","length","fill","console","log","require","cocoSsd","ModelContext","createContext","ModelProvider","children","model","setModel","cocoLabels","getModel","load","Provider","value","isVideoVar","App","document","title","toggleInput","image","isVideo","setIsVideo","isReady","setPrediction","useContext","getPrediction","useCallback","detect","requestAnimationFrame","ToggleInput","checked","htmlFor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7d2a704a.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\n\r\nconst SIZE = 0.9;\r\n\r\nexport default function Image({ img, setIsReady }) {\r\n  const [width, setWidth] = useState(null);\r\n  const [height, setHeight] = useState(null);\r\n  const ready = useRef(null);\r\n\r\n  const readImage = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file && file.type.substr(0, 5) === \"image\") {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        img.current.src = reader.result;\r\n        img.current.alt = file.name;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    ready.current = false;\r\n    setWidth(null)\r\n    setHeight(null)\r\n    setIsReady(false);\r\n    readImage(e);\r\n  };\r\n\r\n  const onLoad = (e) => {\r\n    const winWidth = SIZE * window.innerWidth;\r\n    const winHeight = SIZE * window.innerHeight;\r\n    const imgWidth = img.current.width;\r\n    const imgHeight = img.current.height;\r\n    const winRatio = winHeight / winWidth;\r\n    const imgRatio = imgHeight / imgWidth;\r\n    if (imgRatio > winRatio) {\r\n      setHeight(winHeight);\r\n      setWidth(winHeight / imgRatio);\r\n    } else {\r\n      setWidth(winWidth);\r\n      setHeight(winWidth * imgRatio);\r\n    }\r\n    ready.current = true;\r\n    setIsReady(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"image\">\r\n      <input\r\n        className=\"imageInput\"\r\n        type=\"file\"\r\n        name=\"file\"\r\n        onChange={onChange}\r\n      />\r\n      <img\r\n        ref={img}\r\n        alt=\"\"\r\n        onLoad={onLoad}\r\n        style={{ width: width, height: height }}\r\n        crossOrigin=\"anonymous\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\nexport default function Webcam({ video, setIsReady }) {\r\n  const webcamStream = useRef(null);\r\n\r\n  async function setupWebcam(video) {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      webcamStream.current = await navigator.mediaDevices.getUserMedia({\r\n        audio: false,\r\n        video: {\r\n          facingMode: \"environment\",\r\n        },\r\n      });\r\n      if (\"srcObject\" in video) {\r\n        video.srcObject = webcamStream.current;\r\n      } else {\r\n        video.src = window.URL.createObjectURL(webcamStream.current);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onLoadedData = () => {\r\n    setIsReady(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setupWebcam(video.current);\r\n    return () => webcamStream.current.getTracks()[0].stop();\r\n  }, []);\r\n\r\n  return <video ref={video} onLoadedData={onLoadedData} autoPlay />;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst LABEL_BOX_H = 20;\r\nconst OPACITY_OFF = 0;\r\nconst MIN_SCORE = 0.5;\r\nconst colorScale = d3\r\n  .scaleSequential(d3.interpolatePlasma)\r\n  .domain([MIN_SCORE, 1]);\r\n\r\nexport default function Prediction({ prediction, input }) {\r\n  const [top, setTop] = useState();\r\n  const [left, setLeft] = useState();\r\n  const [width, setWidth] = useState();\r\n  const [height, setHeight] = useState();\r\n\r\n  useEffect(() => {\r\n    if (!input.current) return;\r\n    const rect = input.current.getBoundingClientRect();\r\n    setTop(rect.top);\r\n    setLeft(rect.left);\r\n    setWidth(rect.width);\r\n    setHeight(rect.height);\r\n  });\r\n\r\n  const bboxes = prediction.map((elem, i) => {\r\n    return (\r\n      <g>\r\n        <rect\r\n          key={i}\r\n          className=\"bbox\"\r\n          x={elem.bbox[0]}\r\n          y={elem.bbox[1]}\r\n          width={elem.bbox[2]}\r\n          height={elem.bbox[3]}\r\n          stroke={colorScale(elem.score)}\r\n          opacity={elem.score - OPACITY_OFF}\r\n        />\r\n        <rect\r\n          className=\"labelBox\"\r\n          x={elem.bbox[0]}\r\n          y={elem.bbox[1]}\r\n          width={elem.class.length * 10}\r\n          height={LABEL_BOX_H}\r\n          fill={colorScale(elem.score)}\r\n          opacity={elem.score - OPACITY_OFF}\r\n        />\r\n        <text\r\n          className=\"label\"\r\n          x={elem.bbox[0] + 1}\r\n          y={elem.bbox[1] + LABEL_BOX_H - 6}\r\n        >\r\n          {elem.class}\r\n        </text>\r\n      </g>\r\n    );\r\n  });\r\n\r\n  console.log(prediction);\r\n  if (!prediction) return null;\r\n\r\n  return (\r\n    <svg style={{ top: top, left: left, width: width, height: height }}>\r\n      {bboxes}\r\n    </svg>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/coco_labels.f6197292.txt\";","import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport cocoLabelsFile from \"./data/coco_labels.txt\";\r\n\r\nrequire('@tensorflow/tfjs-backend-cpu');\r\nrequire('@tensorflow/tfjs-backend-webgl');\r\nconst cocoSsd = require('@tensorflow-models/coco-ssd');\r\n\r\nconst LABELS_SIZE = 90;\r\nconst MODEL_URL =\r\n  \"https://tfhub.dev/tensorflow/tfjs-model/ssd_mobilenet_v2/1/default/1\";\r\n\r\nconst ModelContext = createContext();\r\nexport const useModel = () => useContext(ModelContext);\r\n\r\nexport default function ModelProvider({ children }) {\r\n  const [model, setModel] = useState(null);\r\n  const [cocoLabels, setLabels] = useState(null);\r\n\r\n  const getModel = async () => {\r\n    const model = await cocoSsd.load()\r\n    setModel(model)\r\n    // tf.ready().then(() => {\r\n    //   tf.tidy(() => {\r\n    //     tf.loadGraphModel(MODEL_URL, { fromTFHub: true }).then((model) =>\r\n    //       setModel(Object.freeze(model))\r\n    //     );\r\n    //   });\r\n    // });\r\n  };\r\n\r\n  const readLabels = async () => {\r\n    const fetched = await fetch(cocoLabelsFile);\r\n    const text = await fetched.text();\r\n    const array = text.split(/\\r?\\n/);\r\n    const spacedArray = new Array(LABELS_SIZE);\r\n    array.forEach((entry) => {\r\n      const parts = entry.split(/(?<=^\\S+)\\s/);\r\n      const num = parseInt(parts[0]);\r\n      const str = parts[1].trim();\r\n      spacedArray[num] = str;\r\n    });\r\n    setLabels(spacedArray);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // readLabels();\r\n    getModel();\r\n  }, []);\r\n\r\n  if (!model)\r\n    return <h2 className=\"loadingModel\">Loading model ...</h2>;\r\n\r\n  return (\r\n    <ModelContext.Provider value={{ model, cocoLabels }}>\r\n      {children}\r\n    </ModelContext.Provider>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport Image from \"./Image\";\nimport Webcam from \"./Webcam\";\nimport Prediction from \"./Prediction\";\nimport { useModel } from \"./ModelProvider\";\n\nlet isVideoVar = false;\nlet i = 0;\n\nexport default function App() {\n  document.title = \"coco\";\n  const toggleInput = useRef();\n  const image = useRef(null);\n  const video = useRef(null);\n  const input = useRef(null);\n  const [isVideo, setIsVideo] = useState(false);\n  const [isReady, setIsReady] = useState(null);\n  const [prediction, setPrediction] = useState([]);\n  const { model } = useModel();\n\n  const getPrediction = useCallback(async () => {\n    const result = await model.detect(input.current);\n    setPrediction(result);\n    if (isVideoVar) {\n      window.requestAnimationFrame(() => getPrediction());\n    }\n  }, []);\n\n  const ToggleInput = useCallback(() => {\n    const onChange = () => {\n      isVideoVar = !isVideoVar;\n      setIsReady(false);\n      setIsVideo(!isVideo);\n    };\n    return (\n      <div>\n        <input\n          type=\"checkbox\"\n          name=\"toggle\"\n          ref={toggleInput}\n          checked={isVideo}\n          onChange={onChange}\n        />\n        <label htmlFor={toggleInput}>video</label>\n      </div>\n    );\n  }, [isVideo]);\n\n  useEffect(() => {\n    if (!isReady) return;\n    if (isVideo) {\n      input.current = video.current;\n    } else {\n      input.current = image.current;\n    }\n    getPrediction();\n  }, [isVideo, isReady]);\n\n  return (\n    <div>\n      <ToggleInput />\n      {isVideo ? (\n        <Webcam video={video} setIsReady={setIsReady} />\n      ) : (\n        <Image img={image} setIsReady={setIsReady} />\n      )}\n      <Prediction prediction={prediction} input={input} />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ModelProvider from \"./ModelProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ModelProvider>\n      <App />\n    </ModelProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}