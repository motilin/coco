{"version":3,"sources":["Image.js","data/coco_labels.txt","ModelProvider.js","Webcam.js","App.js","reportWebVitals.js","index.js"],"names":["Image","useState","width","setWidth","height","setHeight","img","useRef","ready","className","type","name","onChange","e","current","file","target","files","substr","reader","FileReader","onload","src","result","readAsDataURL","readImage","ref","alt","onLoad","winWidth","window","innerWidth","winHeight","innerHeight","imgWidth","imgRatio","style","ModelContext","createContext","ModelProvider","children","model","setModel","labels","useEffect","tf","fromTFHub","then","Provider","value","Webcam","video","a","navigator","mediaDevices","getUserMedia","audio","facingMode","webcamStream","srcObject","URL","createObjectURL","setupWebcam","autoPlay","App","document","title","toggleInput","setVideo","ToggleInput","checked","htmlFor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.502388cd.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\n\r\nconst SIZE = 0.9;\r\n\r\nexport default function Image() {\r\n  const [width, setWidth] = useState(null);\r\n  const [height, setHeight] = useState(null);\r\n  const img = useRef({});\r\n  const ready = useRef(null);\r\n\r\n  const readImage = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file && file.type.substr(0, 5) === \"image\") {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        img.current.src = reader.result;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    ready.current = false;\r\n    readImage(e);\r\n  };\r\n\r\n  const onLoad = (e) => {\r\n    const winWidth = SIZE * window.innerWidth;\r\n    const winHeight = SIZE * window.innerHeight;\r\n    const imgWidth = img.current.width;\r\n    const imgHeight = img.current.height;\r\n    const winRatio = winHeight / winWidth;\r\n    const imgRatio = imgHeight / imgWidth;\r\n    if (imgRatio > winRatio) {\r\n      setHeight(winHeight);\r\n      setWidth(winHeight / imgRatio);\r\n    } else {\r\n      setWidth(winWidth);\r\n      setHeight(winWidth * imgRatio);\r\n    }\r\n    ready.current = true;\r\n  };\r\n\r\n  return (\r\n    <div className=\"image\">\r\n      <input\r\n        className=\"imageInput\"\r\n        type=\"file\"\r\n        name=\"file\"\r\n        onChange={onChange}\r\n      />\r\n      <img\r\n        ref={img}\r\n        alt=\"upload an image\"\r\n        onLoad={onLoad}\r\n        style={{ width: width, height: height }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/coco_labels.f6197292.txt\";","import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport cocoLabels from \"./data/coco_labels.txt\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nconst LABELS_SIZE = 90;\r\nconst MODEL_URL = \"https://tfhub.dev/tensorflow/tfjs-model/ssd_mobilenet_v2/1/default/1\";\r\n\r\nconst ModelContext = createContext();\r\nexport const useModel = () => useContext(ModelContext);\r\n\r\nexport default function ModelProvider({ children }) {\r\n  const [model, setModel] = useState(\"model\");\r\n  const [labels, setLabels] = useState(\"labels\");\r\n\r\n  const getModel = () => {\r\n    tf.tidy(() => {\r\n      tf.loadGraphModel(MODEL_URL, { fromTFHub: true }).then((model) =>\r\n        setModel(model)\r\n      );\r\n    });\r\n  };\r\n\r\n  const readLabels = async () => {\r\n    const fetched = await fetch(cocoLabels);\r\n    const text = await fetched.text();\r\n    const array = text.split(/\\r?\\n/);\r\n    const spacedArray = new Array(LABELS_SIZE);\r\n    array.map((entry) => {\r\n      const parts = entry.split(/(?<=^\\S+)\\s/);\r\n      const num = parseInt(parts[0]);\r\n      const str = parts[1].trim();\r\n      spacedArray[num] = str;\r\n    });\r\n    setLabels(spacedArray);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // readLabels();\r\n    getModel();\r\n  }, []);\r\n\r\n  return (\r\n    <ModelContext.Provider value={{ model, labels }}>\r\n      {children}\r\n    </ModelContext.Provider>\r\n  );\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\nexport default function Webcam() {\r\n  const video = useRef(null);\r\n\r\n  async function setupWebcam(video) {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      const webcamStream = await navigator.mediaDevices.getUserMedia({\r\n        audio: false,\r\n        video: {\r\n          facingMode: \"user\",\r\n        },\r\n      });\r\n      if (\"srcObject\" in video) {\r\n        video.srcObject = webcamStream;\r\n      } else {\r\n        video.src = window.URL.createObjectURL(webcamStream);\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setupWebcam(video.current);\r\n  }, []);\r\n\r\n  return <video ref={video} autoPlay />;\r\n}\r\n","import \"./App.css\";\nimport React, { useRef, useState } from \"react\";\nimport Image from \"./Image\";\nimport { useModel } from \"./ModelProvider\";\nimport Webcam from \"./Webcam\";\n\nexport default function App() {\n  document.title = \"coco\";\n  const toggleInput = useRef();\n  const [video, setVideo] = useState(false);\n\n  // const { model, labels } = useModel();\n\n  const ToggleInput = () => {\n    const prop = video ? \"checked\" : \"unchecked\";\n    return (\n      <div>\n        <input\n          type=\"checkbox\"\n          name=\"toggle\"\n          ref={toggleInput}\n          checked={video}\n          onChange={() => setVideo(!video)}\n        />\n        <label htmlFor={toggleInput}>video</label>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <ToggleInput />\n      {video ? <Webcam /> : <Image />}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ModelProvider from \"./ModelProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ModelProvider>\n      <App />\n    </ModelProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}