{"version":3,"sources":["Image.js","Webcam.js","data/coco_labels.txt","ModelProvider.js","PredictionProvider.js","App.js","reportWebVitals.js","index.js"],"names":["Image","img","setIsReady","useState","width","setWidth","height","setHeight","ready","useRef","className","type","name","onChange","e","current","file","target","files","substr","reader","FileReader","onload","src","result","readAsDataURL","readImage","ref","alt","onLoad","winWidth","window","innerWidth","winHeight","innerHeight","imgWidth","imgRatio","style","Webcam","video","webcamStream","a","navigator","mediaDevices","getUserMedia","audio","facingMode","srcObject","URL","createObjectURL","useEffect","setupWebcam","getTracks","stop","onLoadStart","autoPlay","ModelContext","createContext","ModelProvider","children","model","setModel","cocoLabels","setLabels","readLabels","fetch","cocoLabelsFile","fetched","text","array","split","spacedArray","Array","map","entry","parts","num","parseInt","str","trim","tf","then","fromTFHub","Provider","value","PredictionContext","PredictionProvider","labels","boxes","probabilities","input","isVideo","useContext","getPrediction","fromPixels","console","log","requestAnimationFrame","predictImage","image","predictVideo","stopVideo","App","document","title","toggleInput","setIsVideo","isReady","ToggleInput","checked","htmlFor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3326023f.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\n\r\nconst SIZE = 0.9;\r\n\r\nexport default function Image({ img, setIsReady }) {\r\n  const [width, setWidth] = useState(null);\r\n  const [height, setHeight] = useState(null);\r\n  const ready = useRef(null);\r\n\r\n  const readImage = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file && file.type.substr(0, 5) === \"image\") {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        img.current.src = reader.result;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    ready.current = false;\r\n    setIsReady(false);\r\n    readImage(e);\r\n  };\r\n\r\n  const onLoad = (e) => {\r\n    const winWidth = SIZE * window.innerWidth;\r\n    const winHeight = SIZE * window.innerHeight;\r\n    const imgWidth = img.current.width;\r\n    const imgHeight = img.current.height;\r\n    const winRatio = winHeight / winWidth;\r\n    const imgRatio = imgHeight / imgWidth;\r\n    if (imgRatio > winRatio) {\r\n      setHeight(winHeight);\r\n      setWidth(winHeight / imgRatio);\r\n    } else {\r\n      setWidth(winWidth);\r\n      setHeight(winWidth * imgRatio);\r\n    }\r\n    ready.current = true;\r\n    setIsReady(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"image\">\r\n      <input\r\n        className=\"imageInput\"\r\n        type=\"file\"\r\n        name=\"file\"\r\n        onChange={onChange}\r\n      />\r\n      <img\r\n        ref={img}\r\n        alt=\"upload an image\"\r\n        onLoad={onLoad}\r\n        style={{ width: width, height: height }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\nexport default function Webcam({ video, setIsReady }) {\r\n  const webcamStream = useRef(null);\r\n\r\n  async function setupWebcam(video) {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      webcamStream.current = await navigator.mediaDevices.getUserMedia({\r\n        audio: false,\r\n        video: {\r\n          facingMode: \"user\",\r\n        },\r\n      });\r\n      if (\"srcObject\" in video) {\r\n        video.srcObject = webcamStream.current;\r\n      } else {\r\n        video.src = window.URL.createObjectURL(webcamStream.current);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onLoadStart = () => {\r\n    setIsReady(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setupWebcam(video.current);\r\n    return () => webcamStream.current.getTracks()[0].stop();\r\n  }, []);\r\n\r\n  return <video ref={video} onLoadStart={onLoadStart} autoPlay />;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/coco_labels.f6197292.txt\";","import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport cocoLabelsFile from \"./data/coco_labels.txt\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nconst LABELS_SIZE = 90;\r\nconst MODEL_URL =\r\n  \"https://tfhub.dev/tensorflow/tfjs-model/ssd_mobilenet_v2/1/default/1\";\r\n\r\nconst ModelContext = createContext();\r\nexport const useModel = () => useContext(ModelContext);\r\n\r\nexport default function ModelProvider({ children }) {\r\n  const [model, setModel] = useState(null);\r\n  const [cocoLabels, setLabels] = useState(null);\r\n\r\n  const getModel = () => {\r\n    tf.ready().then(() => {\r\n      tf.tidy(() => {\r\n        tf.loadGraphModel(MODEL_URL, { fromTFHub: true }).then((model) =>\r\n          setModel(model)\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  const readLabels = async () => {\r\n    const fetched = await fetch(cocoLabelsFile);\r\n    const text = await fetched.text();\r\n    const array = text.split(/\\r?\\n/);\r\n    const spacedArray = new Array(LABELS_SIZE);\r\n    array.map((entry) => {\r\n      const parts = entry.split(/(?<=^\\S+)\\s/);\r\n      const num = parseInt(parts[0]);\r\n      const str = parts[1].trim();\r\n      spacedArray[num] = str;\r\n    });\r\n    setLabels(spacedArray);\r\n  };\r\n\r\n  useEffect(() => {\r\n    readLabels();\r\n    getModel();\r\n  }, []);\r\n\r\n  if (!model || !cocoLabels)\r\n    return <h2 className=\"loadingModel\">Loading model ...</h2>;\r\n\r\n  return (\r\n    <ModelContext.Provider value={{ model, cocoLabels }}>\r\n      {children}\r\n    </ModelContext.Provider>\r\n  );\r\n}\r\n","import React, { createContext, useContext, useState, useRef } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport { useModel } from \"./ModelProvider\";\r\n\r\nconst PredictionContext = createContext();\r\nexport const usePrediction = () => useContext(PredictionContext);\r\n\r\nexport default function PredictionProvider({ children }) {\r\n  const [labels, setLabels] = useState();\r\n  const [boxes, setBoxes] = useState();\r\n  const [probabilities, setProbabilities] = useState();\r\n  const input = useRef(null);\r\n  const isVideo = useRef(false);\r\n  const { model, cocoLabels } = useModel();\r\n\r\n  const getPrediction = () => {\r\n    tf.ready().then(() => {\r\n      tf.tidy(() => {\r\n        const tensor = tf.browser.fromPixels(input.current);\r\n      });\r\n    });\r\n\r\n    console.log(\"prediction\");\r\n    if (isVideo.current) {\r\n      window.requestAnimationFrame(() => getPrediction());\r\n    }\r\n  };\r\n\r\n  const predictImage = (image) => {\r\n    isVideo.current = false;\r\n    input.current = image.current;\r\n    getPrediction();\r\n  };\r\n\r\n  const predictVideo = (video) => {\r\n    isVideo.current = true;\r\n    input.current = video.current;\r\n    getPrediction();\r\n  };\r\n\r\n  const stopVideo = () => {\r\n    isVideo.current = false;\r\n  };\r\n\r\n  return (\r\n    <PredictionContext.Provider\r\n      value={{\r\n        labels,\r\n        boxes,\r\n        probabilities,\r\n        predictImage,\r\n        predictVideo,\r\n        stopVideo,\r\n      }}\r\n    >\r\n      {children}\r\n    </PredictionContext.Provider>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Image from \"./Image\";\nimport Webcam from \"./Webcam\";\nimport { usePrediction } from \"./PredictionProvider\";\n\nexport default function App() {\n  document.title = \"coco\";\n  const toggleInput = useRef();\n  const image = useRef(null);\n  const video = useRef(null);\n  const [isVideo, setIsVideo] = useState(false);\n  const [isReady, setIsReady] = useState(false);\n  const {\n    labels,\n    boxes,\n    probabilities,\n    predictImage,\n    predictVideo,\n    stopVideo,\n  } = usePrediction();\n\n  const ToggleInput = () => {\n    const onChange = () => {\n      if (isVideo) stopVideo();\n      setIsReady(false);\n      setIsVideo(!isVideo);\n    };\n    return (\n      <div>\n        <input\n          type=\"checkbox\"\n          name=\"toggle\"\n          ref={toggleInput}\n          checked={isVideo}\n          onChange={onChange}\n        />\n        <label htmlFor={toggleInput}>video</label>\n      </div>\n    );\n  };\n\n  console.log(labels);\n  console.log(boxes);\n  console.log(probabilities);\n\n  useEffect(() => {\n    if (!isReady) return;\n    if (isVideo) {\n      predictVideo(video);\n    } else {\n      predictImage(image);\n    }\n  }, [isVideo, isReady]);\n\n  return (\n    <div>\n      <ToggleInput />\n      {isVideo ? (\n        <Webcam video={video} setIsReady={setIsReady} />\n      ) : (\n        <Image img={image} setIsReady={setIsReady} />\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ModelProvider from \"./ModelProvider\";\nimport PredictionProvider from \"./PredictionProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ModelProvider>\n      <PredictionProvider>\n        <App />\n      </PredictionProvider>\n    </ModelProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}